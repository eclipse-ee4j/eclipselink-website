<?xml version="1.0" encoding="UTF-8"?>
<sections title="EclipseLink JPA">


	<section class="title">
		<description>
			<h1>EclipseLink MOXy</h1>
			<h3>XML Binding with JAXB and SDO</h3>
			<p>
				The EclipseLink MOXy component enables Java developers
				to efficiently bind Java classes to XML Schemas. MOXy
				implements JAXB allowing developers to provide their
				mapping information through annotations as well as
				providing support for storing the mappings in XML
				format. The many advanced mappings enable developers to
				handle the complex XML structures without having to
				mirror the schema in their Java class model.
			</p>
		</description>
	</section>

	<section class="main">
		<description>
			<h1>Getting Started with MOXy</h1>
		</description>

		<section name="Manipulating XML using EclipseLink MOXy (JAXB)"
			link="http://wiki.eclipse.org/EclipseLink/Examples/MOXy/JAXB">
			<em>
				This examnple walks through the configuration and usage
				of MOXY's JAXB implementation to ...
			</em>
		</section>

		<section name="Meet in the Middle Mapping with MOXy"
			link="http://wiki.eclipse.org/EclipseLink/Examples/MOXy">
			<em>
				This tutorial illustrates for a POJO object model can be
				mapped to an XML schema using the EclipseLink Workbench
				and XML mappings with the JAXB runtime API.
			</em>
		</section>

		<section name="More MOXy Examples"
			link="http://wiki.eclipse.org/EclipseLink/Examples/MOXy">
		</section>
	</section>
	
	<section class="main" name="Getting Started with EclipseLink SDO">

		<section name="Generating static Data Objects from XSD"
			link="http://wiki.eclipse.org/EclipseLink/Examples/SDO/Compiler">
			<em>
				Generating a static SDO DataObject model from an XML
				schema using EclipseLink's SDO compiler.
			</em>
		</section>

		<section name="Using POJOs and JPA Entities with SDO"
			link="http://wiki.eclipse.org/EclipseLink/Examples/SDO#Data_Access_Service">
			<em>
				EclipseLink SDO provides Data Access Service (DAS)
				combining existing POJO object models or JPA entities
				wrapped within static or dynamic data objects.
			</em>
		</section>

		<section name="More EclipseLink SDO examples"
			link="http://wiki.eclipse.org/EclipseLink/Examples/SDO" />

	</section>

	<section class="sideitem">
		<description>
			<h3>Documentation</h3>
			<li><a href="http://wiki.eclipse.org/EclipseLink/UserGuide/MOXy">MOXy User Guide</a></li>
			<li><a href="http://wiki.eclipse.org/EclipseLink/Examples/MOXy">MOXy Examples</a></li>
		</description>
	</section>
	
		<section class="sideitem">
		<description>
			<h3>SDO Resources</h3>
			<li>
				<a
					href="http://www.osoa.org/display/Main/Service+Data+Objects+Home">
					OSOA SDO Home
				</a>
			</li>
			<a
				href="http://www.osoa.org/display/Main/Service+Data+Objects+Home">
				<img
					src="http://www.osoa.org/download/userResources/logo" border="0" />
			</a>
			<li>
				<a href="http://jcp.org/en/jsr/detail?id=235">
					SDO 2.1.1 (JSR 235)
				</a>
				<br />
				<a href="/eclipselink/downloads/ri.php">RI Download</a>
			</li>

			<h3>Documentation</h3>
			<li>
				<a
					href="http://wiki.eclipse.org/EclipseLink/FAQ/WhatIsSDO">
					EclipseLink FAQ: What is SDO?
				</a>
			</li>
			<li>
				<a
					href="http://wiki.eclipse.org/Category:SDO">
					EclipseLink SDO User Guide
				</a>
			</li>
		</description>
	</section>

</sections>
